gas <- table(Top5$LocationDescription, Top5$Arrest, Top5$Weekday)
gas
day <- table(Top5$LocationDescription, Top5$Arrest, Top5$Weekday)
day
day <- data.frame(table(Top5$LocationDescription, Top5$Arrest, Top5$Weekday))
day
View(day)
day$Var3
day$Var1
day$Var2
sort(table(Top5$LocationDescription))
sort(table(Top5$Weekday))
sort(table(Top5$Weekday, Top5$LocationDescription == "GAS STATION"))
sort(table(Top5$Weekday, Top5$LocationDescription == "GAS STATION" & Top5$Weekday == "FRIDAY"))
sort(table((Top5$Weekday, Top5$Weekday), Top5$LocationDescription == "GAS STATION"))
sort(table(Top5$Weekday, Top5$Weekday, Top5$LocationDescription == "GAS STATION"))
sort(table(Top5$Weekday))
sort(table(Top5$Weekday, Top5$LocationDescription == "GAS STATION"))
subset(sort(table(Top5$Weekday)), Top5$LocationDescription == "GAS STATION")
sort(table(Top5$Weekday))
gas <- sort(table(Top5$Weekday))
gas
gas <- sort(subset(table(Top5$Weekday), Top5$LocationDescription == "GAS STATION")
gas <- sort(subset(table(Top5$Weekday), Top5$LocationDescription == "GAS STATION"))
gas
gas <- sort(table(Top5$Weekday))
gas
gas <- sort(table(Top5$Weekday), Top5$LocationDescription == "GAS STATION")
gas <- sort(table(Top5$Weekday))
gas
gas <- subset(Top5$LocationDescription(sort(table(Top5$Weekday))), "GAS STATION")
$subset
?subset
Top5
gas <- subset(Top5, LocationDescription == "GAS STATION")
gas
gas <- subset(Top5, LocationDescription == "GAS STATION", select = c(Arrest, Weekday))
gas
gas1 <- sort(table(gas$Weekday))
gas1
gas1 <- sort(table(gas$Weekday), decreasing = TRUE)
gas1
driveway <- subset(Top5, LocationDescription == "DRIVEWAY - RESIDENTIAL", select = c(Arrest, Weekday))
driveway1 <- sort(table(driveway$Weekday), decreasing = TRUE)
driveway1
IBMStock <- read.csv("C:/Users/John/GitHub/MIT/IBMStock.csv")
View(IBMStock)
IBM <- IBMStock
GEStock <- read.csv("C:/Users/John/GitHub/MIT/GEStock.csv")
View(GEStock)
GE <- GEStock
ProcterGambleStock <- read.csv("C:/Users/John/GitHub/MIT/ProcterGambleStock.csv")
View(ProcterGambleStock)
ProctorGamble <- ProctorGambelStock
ProctorGamble <- ProctorGambleStock
ProcterGamble <- ProcterGambleStock
CocaColaStock <- read.csv("C:/Users/John/GitHub/MIT/CocaColaStock.csv")
View(CocaColaStock)
CocaCola <- CocaColaStock
BoeingStock <- read.csv("C:/Users/John/GitHub/MIT/BoeingStock.csv")
View(BoeingStock)
Boeing <- BoeingStock
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
min(GE$Date)
max(GE$Date)
mean(IBM$StockPrice)
min(GE$StockPrice)
max(CocaCola$StockPrice)
median(Boeing$StockPrice)
sd(ProcterGamble$StockPrice)
?plot
plot(CocaCola$Date, CocaCola$StocPrice)
plot(CocaCola)
plot(CocaCola, type = l)
plot(CocaCola, type = "l")
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
plot(CocaCola, type = "l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue")
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("1983-01-01")), lwd=2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="blue")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="green")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="orange")
abline(v=as.Date(c("1997-10-01")), lwd=2)
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-01")), lwd=2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="blue")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="green")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="orange")
abline(v=as.Date(c("1997-11-01")), lwd=2)
abline(v=as.Date(c("1997-09-01")), lwd=2)
months(IBM$Date)
tapply(mean(IBM$StockPrice), months(IBM$Date))
?tapply
months(IBM$Date)
months(tapply(IBM$Date, FUN=mean))
months(tapply(IBM$Date, IBM, mean))
tapply(months(IBM$Date), IBM, mean)
tapply(IBM$Date, IBM, mean)
tapply(IBM$Date, IBM, mean, rm.na=TRUE)
sort(tapply(IBM$Date, IBM, mean, rm.na=TRUE))
months(tapply(IBM$Date, IBM, mean, rm.na=TRUE))
months(tapply(IBM$Date, IBM, mean, rm.na=TRUE))
tapply(IBM$Date, IBM, mean)
tapply(months(IBM$Date), IBM, mean)
ibm.month <= tapply(months(IBM$Date), IBM, mean)
ibm.month <- tapply(months(IBM$Date), IBM, mean)
ibm.month
tapply(IBM, months(IBM$Date), mean)
tapply(IBM, months(IBM$Date), mean, na.rm=TRUE)
tapply(presidents, cycle(presidents), mean, na.rm = TRUE)
tapply(IBM, months(IBM), mean, na.rm=TRUE)
tapply(IBM, IBM$Date, mean, na.rm=TRUE)
?presidents
presidents
tapply(IBM, cycle(IBM$Date), mean, na.rm=TRUE)
tapply(IBM, mean, na.rm=TRUE)
months(IBM$Date)
mean(months(IBM$Date))
summary(months(IBM$Date))
summary(IBM$Date)
tapply(IBM$StockPrice, month(IBM$Date), mean, na.rm=TRUE)
tapply(IBM$StockPrice, IBM$Date, mean, na.rm=TRUE)
month(tapply(IBM$StockPrice, IBM$Date, mean, na.rm=TRUE))
ibm.month = tapply(IBM$StockPrice, IBM$Date, mean, na.rm=TRUE)
ibm.month
ibm.month = data.frame(tapply(IBM$StockPrice, IBM$Date, mean, na.rm=TRUE))
ibm.month
View(ibm.month)
?names
names(ibm.month) <- c("Date", "Price")
names(ibm.month)[1] <- "Date"
names(ibm.month)[2] <- "Price"
ibm.month
names(ibm.month)[1] <- "price"
ibm.month
View(ibm.month)
months(ibm.month)
summary(ibm.months)
summary(ibm.month)
months(IBM$Date)
View(IBM)
tapply(IBM$StockPrice, IBM$Date, mean)
ibm.mean = tapply(IBM$StockPrice, IBM$Date, mean)
ibm.mean
summary(ibm.mean)
month(ibm.mean)
?sort
sort(months(ibm.mean))
months(ibm.mean)
ibm.mean = data.frame(tapply(IBM$StockPrice, IBM$Date, mean))
ibm.mean
ibm.mean = table(tapply(IBM$StockPrice, IBM$Date, mean))
ibm.mean
ibm.mean = tapply(IBM$StockPrice, IBM, mean)
ibm.mean
ibm.mean = tapply(IBM$StockPrice, months(IBM$Date), mean)
ibm.mean
plot(ibm.mean)
mean(IBM$StockPrice)
ibm.months <- tapply(IBM$StockPrice, months(IBM$Date), mean) >= mean(IBM$StockPrice)
ibm.months
ibm.mean = tapply(IBM$StockPrice, months(IBM$Date), mean)
ge.mean = tapply(IBM$StockPrice, months(IBM$Date), mean)
ge.mean = tapply(GE$StockPrice, months(GE$Date), mean)
coke.mean = tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
pg.mean = tapply(ProcterGamble$StockPrice, months(ProcterGamble$Date), mean)
boeing.mean = tapply(Boeing$StockPrice, months(Boeing$Date), mean)
max(ge)
max(ge.mean)
ge.mean[1]
max(coke.mean)
coke.mean[1]
CPSData <- read.csv("C:/Users/John/GitHub/MIT/CPSData.csv")
View(CPSData)
MetroAreaCodes <- read.csv("C:/Users/John/GitHub/MIT/MetroAreaCodes.csv")
View(MetroAreaCodes)
CountryCodes <- read.csv("C:/Users/John/GitHub/MIT/CountryCodes.csv")
View(CountryCodes)
CPS <- CPSData
summary(CPS)
str(CPS)
CPS <- (CPSData, rm.na=TRUE)
CPS$Industry
CPS.Industry <- table(CPS$Industry, rm.na=TRUE)
CPS.Industry <- (CPS$Industry, rm.na=TRUE)
CPS.Industry <- CPS$Industry, rm.na=TRUE
sort(table(CPS$Industry, na.rm=TRUE))
sort(table(CPS$Industry, rm.na=TRUE))
View(CPS)
sum(CPS$Industry, rm.na=TRUE)
aggregate(CPS$Industry, rm.na=TRUE)
aggregate(CPS$Industry, sum, rm.na=TRUE)
aggregate(CPS$Industry, FUN=sum, rm.na=TRUE)
sort(table(CPS$Region))
sort(table(CPS$Industry))
sort(table(CPS$Industry), descending=TRUE)
head(sort(table(CPS$State), descending=TRUE) )
?sort
head(sort(table(CPS$State), decreasing=TRUE) )
head(sort(table(CPS$State), decreasing=FALSE))
head(sort(table(CPS$State), decreasing=TRUE) )
sort(table(CPS$Citizenship))
(7073 + 116639) / (7073 + 7590 + 116639)
sort(table(CPS$Race, CPS$Hispanic == 1))
sort(table(CPS$Race)
sort(table(CPS$Race))
sort(table(CPS$Hispanic))
?tapply
race <- tapply(CPS$Race, CPS$Hispanic, sum)
race <- tapply(CPS$Hispanic, CPS$Race, sum)
race
CPS$PeopleInHousehold
summary(CPS$PeopleInHousehold)
length(which(!is.na(CPS$PeopleInHousehold)))
length(which(!is.na(CPS$Region)))
length(which(!is.na(CPS$State)))
length(which(!is.na(CPS$MetroAreaCode)))
length(which(!is.na(CPS$Age)))
length(which(!is.na(CPS$Married)))
length(which(!is.na(CPS$Sex)))
length(which(!is.na(CPS$Education)))
length(which(!is.na(CPS$Race)))
length(which(!is.na(CPS$Hispanic)))
length(which(!is.na(CPS$CountryOfBirthCode)))
length(which(!is.na(CPS$Citizenship)))
length(which(!is.na(CPS$EmploymentStatus)))
length(which(!is.na(CPS$Industry)))
is.na(CPS$Married)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$Region, is.na(CPS$MetroAreaCode))
region <- c(table(CPS$Region, is.na(CPS$MetroAreaCode)), (is.na(CPS$MetroAreaCode)/CPS$Region))
midwest <- (20010 / (20010 + 10674))
northeast <- (20330 / (20330 + 5609))
south <- (31631 / (31631 + 9871))
west <- (25093 / (25093 + 8084))
midwest
northeast
south
west
midwest <- (10674 / (10674 + 20010))
northeast <- (5609 / (5609 + 20330))
south <- (9871 / (9871 + 31631))
west <- (8084 / (8084 + 25093))
midwest
northeast
south
west
tapply(CPS$MetroAreaCode, CPS$State, mean)
tapply(CPS$State, CPS$MetroAreaCode, mean)
tapply(CPS$MetroAreaCode, CPS$State, mean)
tapply(CPS$MetroAreaCode, CPS$State, mean, rm.na=TRUE)
state <- aggregate(CPS$State ~ CPS$MetroAreaCode, is.na=TRUE)
state <- aggregate(CPS$State ~ CPS$MetroAreaCode, mean, is.na=TRUE)
state <- aggregate(State ~ MetroAreaCode, data=CPS, FUN=mean, is.na=TRUE)
state
state <- aggregate(MetroAreaCode ~ State, data=CPS, FUN=mean, is.na=TRUE)
state
state <- aggregate(MetroAreaCode ~ State, data=CPS, FUN=mean)
state
state <- aggregate(MetroAreaCode[is.na] ~ State, data=CPS, FUN=mean)
state <- aggregate(MetroAreaCode[== is.na] ~ State, data=CPS, FUN=mean)
state <- table(CPS$State, is.na(CPS$MetroAreaCode))
state
state1 <- c((state), mean(state))
state1
state1 <- tapply(state, mean)
state1 <- mean(state)
state1
state <- table(CPS$State, is.na(CPS$MetroAreaCode), mean(is.numeric(CPS$MetroAreaCode)))
state <- table(CPS$State, is.na(CPS$MetroAreaCode), mean(is.numeric(is.na(CPS$MetroAreaCode))))
state <- table(CPS$State, is.na(CPS$MetroAreaCode))
state
mean(state[Wisconsin])
mean(state == "Wisconsin")
state <- tapply(CPS$MetroAreaCode, CPS$State, mean)
state
state <- table(CPS$State, is.na(CPS$MetroAreaCode))
state
state <- tapply(table(CPS$State, is.na(CPS$MetroAreaCode)), mean)
state <- table(CPS$State, is.na(CPS$MetroAreaCode))
state <- tapply(CPS$State, CPS$MetroAreaCode, mean)
state
state <- tapply(CPS$State, CPS$MetroAreaCode, mean, na.rm=TRUE)
state
state <- tapply(CPS$MetroAreaCode, CPS$State, mean, na.rm=TRUE)
state
state <- tapply(sum(CPS$MetroAreaCode), CPS$State, mean, na.rm=TRUE)
state <- table(CPS$State, is.na(CPS$MetroAreaCode))
state
state <- table(CPS$State, is.na(CPS$MetroAreaCode), meanis.na(CPS$MetroAreaCode))
state <- table(CPS$State, is.na(CPS$MetroAreaCode), mean(is.na(CPS$MetroAreaCode)))
state <- table(CPS$State, is.na(CPS$MetroAreaCode))
state1 <- mean(state)
state1
rural <- tapply(CPS, MetroAreaCode, mean)
rural <- tapply(CPS, CPS$MetroAreaCode, mean)
rural <- tapply(is.na(CPS$MetroAreaCode), CPS$State, mean)
rural
head(rural)
head(rural, decreasing = TRUE)
head(rural, decreasing = FALSE)
rural1 <- sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean))
rural1
MetroAreaMap <- MetroAreaCodes
CountryMap <- CountryCodes
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
summary(CPS)
metroarea <- table(CPS$MetroAreaCode, is.na(CPS$MetroArea))
metroarea
summary(CPS)
sort(CPS$MetroArea, decreasing=TRUE)
sort(table(CPS$MetroArea, decreasing=TRUE)
sort(table(CPS$MetroArea, decreasing=TRUE))
summary(CPS)
head(CPS$MetroArea)
head(sum(CPS$MetroArea), decreasing=TRUE)
head(CPS$MetroArea, decreasing=TRUE)
?head
head(CPS$MetroArea)
sort(head(CPS$MetroArea), decreasing=TRUE)
sort(head(CPS$MetroArea), decreasing=FALSE)
?sort
sort(CPS$MetroArea, decreasing = TRUE)
x <- CPS$MetroArea
c
x
sum(x)
sort(x)
View(CPS)
max(CPS$MetroArea)
max(sum(CPS$MetroArea))
table(CPS$MetroArea, is.na(CPS$MetroAreaCode)).
table(CPS$MetroArea, is.na(CPS$MetroAreaCode))
sort(table(CPS$MetroArea, is.na(CPS$MetroAreaCode)), decreasing = TRUE)
table(CPS$MetroArea, is.na(CPS$MetroAreaCode))
metro <- table(CPS$MetroArea, is.na(CPS$MetroAreaCode))
metro
max(metro)
metro[1]
MetroAreaCodes
metro <- sort(table(CPS$MetroArea, is.na(CPS$MetroAreaCode)), decreasing=TRUE)
metro
metro <- table(CPS$MetroArea, is.na(CPS$MetroAreaCode))
metro
metro[Atlanta-Sandy Springs-Marietta, GA]
metro[Marietta, GA]
sort(tapply(is.na(CPS$Hispanic), CPS$MetroArea, mean))
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, sum))
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, mean), >=.2)
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, mean))
?sort
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, mean), decreasing=FALSE)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=TRUE))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=TRUE), decreasing=TRUE)
View(CountryMap)
CPS = merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
CPS
summary(CPS)
sort(CPS$Country, decreasing=TRUE)
table(CPS$Country)
which.max(table(CPS$Country))
sort(table(CPS$Country), decreasing=TRUE)
View(CPS)
sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, sum, na.rm=TRUE), decreasing=TRUE)
sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States", mean, na.rm=TRUE), decreasing=TRUE)
sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, mean, na.rm=TRUE), decreasing=TRUE)
no <- sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, mean, na.rm=TRUE), decreasing=TRUE)
no
no.mean <- sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, mean, na.rm=TRUE), decreasing=TRUE)
no.sum <- sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country, sum, na.rm=TRUE), decreasing=TRUE)
no.sum
3736 / (3736 + sum(no.sum))
100 - 0.4087527
1 / 0.4087527
0.4087527 / 1
3736 / sum(no.sum)
(sum(no.sum) - 3736) / sum(no.sum)
boston <- sort(tapply(CPS$MetroArea == "Boston-Cambridge-Quincy, MA-NH", CPS$Country == "India", sum, na.rm=TRUE), decreasing=TRUE)
boston
Minny <- sort(tapply(CPS$MetroArea == "Minneapolis-St Paul-Bloomington, MN-WI", CPS$Country == "India", sum, na.rm=TRUE), decreasing=TRUE)
NY <- sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country == "India", sum, na.rm=TRUE), decreasing=TRUE)
Wash <- sort(tapply(CPS$MetroArea == "Washington-Arlington-Alexandria, DC-VA-MD-WV", CPS$Country == "India", sum, na.rm=TRUE), decreasing=TRUE)
boston
Minny
NY
Wash
boston <- sort(tapply(CPS$MetroArea == "Boston-Cambridge-Quincy, MA-NH", CPS$Country == "Brazil", sum, na.rm=TRUE), decreasing=TRUE)
Minny <- sort(tapply(CPS$MetroArea == "Minneapolis-St Paul-Bloomington, MN-WI", CPS$Country == "Brazil", sum, na.rm=TRUE), decreasing=TRUE)
NY <- sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country == "Brazil", sum, na.rm=TRUE), decreasing=TRUE)
Wash <- sort(tapply(CPS$MetroArea == "Washington-Arlington-Alexandria, DC-VA-MD-WV", CPS$Country == "Brazil", sum, na.rm=TRUE), decreasing=TRUE)
boston
Minny
NY
Wash
boston <- sort(tapply(CPS$MetroArea == "Boston-Cambridge-Quincy, MA-NH", CPS$Country == "Somalia", sum, na.rm=TRUE), decreasing=TRUE)
Minny <- sort(tapply(CPS$MetroArea == "Minneapolis-St Paul-Bloomington, MN-WI", CPS$Country == "Somalia", sum, na.rm=TRUE), decreasing=TRUE)
NY <- sort(tapply(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country == "Somalia", sum, na.rm=TRUE), decreasing=TRUE)
Wash <- sort(tapply(CPS$MetroArea == "Washington-Arlington-Alexandria, DC-VA-MD-WV", CPS$Country == "Somalia", sum, na.rm=TRUE), decreasing=TRUE)
boston
Minny
NY
Wash
url.train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
#setwd("C:/Users/John/Github/NOAA") # Setup the Workspace
# Download the training dataset.  This may take several minutes.  Skip if it already exists.
file.train <- "./pml-training.csv"
if (!file.exists(zipfile)) {
download.file(url.train, destfile = file.train, mode = "wb")
}
url.train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
#setwd("C:/Users/John/Github/NOAA") # Setup the Workspace
# Download the training dataset.  This may take several minutes.  Skip if it already exists.
file.train <- "./pml-training.csv"
if (!file.exists(file.train)) {
download.file(url.train, destfile = file.train, mode = "wb")
}
url.test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#setwd("C:/Users/John/Github/NOAA") # Setup the Workspace
# Download the training dataset.  This may take several minutes.  Skip if it already exists.
file.test <- "./pml-testing.csv"
if (!file.exists(file.test)) {
download.file(url.test, destfile = file.test, mode = "wb")
}
# Read the training and test datasets, this may take several minutes
data.train <- read.csv("pml-training.csv", sep=",")
data.test <- read.csv("pml-testing.csv", sep=",")
str(data.train)
summary(data.train) # What does the data look like?
head(data.train) # What are the variable names?
wine <- read.csv("C:/Users/John/GitHub/MIT/wine.csv")
View(wine)
model1 = lm(Price ~ HarvestRain + WinterRain, data=wine)
summary(model1)
cor(wine$HarvestRain, wine$WinterRain)
ra = -837.38 + 2913.6(.297) + 1514.29(.370)
ra = -837.38 + (2913.6 * .297) + (1514.29 * .370)
ra
ra = -837.38 + (2913.6 * .311) + (1514.29 * .405)
ra
ra = -804.63 + (2913.6 * .311) + (1514.29 * .405)
ra
ra = -804.63 + (2737.77 * .311) + (1584.91 * .405)
ra
baseball = read.csv("baseball.csv")
baseball = read.csv("baseball.csv")
baseball <- read.csv("C:/Users/John/GitHub/MIT/baseball.csv")
View(baseball)
str(baseball)
wage = lm(W ~ OBP + SLG, data=baseball)
summary(wage)
salary = -35.827 + (334.854 * .338) + (18.770 * .540)
salary
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94,88,95,88,93,94,98,97,93,94)
wins2013 = c(97,97,92,93,92,96,94,96,92,90)
cor(teamRank, wins2012)
cor(teamRank, wins2013)
NBA_train <- read.csv("C:/Users/John/GitHub/MIT/NBA_train.csv")
View(NBA_train)
NBA_test <- read.csv("C:/Users/John/GitHub/MIT/NBA_test.csv")
View(NBA_test)
1/(0.9947 + 0.9953 + 0.9863 + 0.9956)
rm(list=ls()) # Clear the Workspace
setwd("C:/Users/John/Github/Practical Machine Learning") # Setup the Workspace
set.seed(100)
library(caret)
library(randomForest)
library(rpart)
url.train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
# Download the training dataset.  This may take several minutes.  Skip if it already exists.
file.train <- "./pml-training.csv"
if (!file.exists(file.train)) {
download.file(url.train, destfile = file.train, mode = "wb")
}
url.test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Download the training dataset.  This may take several minutes.  Skip if it already exists.
file.test <- "./pml-testing.csv"
if (!file.exists(file.test)) {
download.file(url.test, destfile = file.test, mode = "wb")
}
data.train <- read.csv("pml-training.csv", sep=",", na.strings=c("NA","","#DIV/0!"))
data.test <- read.csv("pml-testing.csv", sep=",")
data.train.tidy <- data.train[,-c(1:7)]  #Remove unnecessary variables
data.train.tidy <- data.train.tidy[,colSums(is.na(data.train.tidy)) == 0]  #Remove all columns with zeros
data.test.tidy <- data.test[,-c(1:7)]  #Remove unnecessary variables
data.test.tidy <- data.test.tidy[,colSums(is.na(data.test.tidy)) == 0]  #Remove all columns with zeros
inTrain <- createDataPartition(y=data.train$classe, p=0.75, list=FALSE)
training <- data.train.tidy[inTrain,]
testing <- data.train.tidy[-inTrain,]
dim(training)
model.dt <- rpart(classe ~ ., data=training, method="class")
predict.dt <- predict(model.dt, testing, type = "class")
model.rf <- randomForest(classe ~. , data=training, method="class")
predict.rf <- predict(model.rf, testing, type = "class")
install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predict.rf, model.rf$classe)
ROCRpred = prediction(predict.rf, training$classe)
View(training)
